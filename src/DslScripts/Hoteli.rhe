Module Hoteli {
    Entity Hotel
    {
        ShortString Code { AutoCode; }
        ShortString Name;
        LongString Address;
    }

    Entity Location 
    {
        Extends Hoteli.Hotel;
        ShortString Code { AutoCode; }
        ShortString Country;
        ShortString County;
        ShortString City;
        ShortString Area;
    }

    Entity RoomReservation 
    { 
        ShortString Code { AutoCode; }
        Reference ReservationHotel Hoteli.Reservation;
        Reference ReservationRoom Hoteli.Rooms;
    }

    Entity Reservation
    {
        ShortString Code { AutoCode; }
        Reference Guest Hoteli.Person;
        Date DateFrom;
        Date DateTo;
        Integer NumberOfPeople;
    

        ItemFilter Negative 'item =>item.DateTo < DateTime.Now'; 
        LockProperty DateTo.Negative 'Dates are negative impossible to insert';
    }

    Entity Rooms 
    {
        ShortString Code { AutoCode; } 
        Integer NumberOfPeople;
        Reference RoomOfHotel Hoteli.Hotel;
        ShortString TypeOfRoom;
    }

    Entity Person
    {
        ShortString Code { AutoCode; } 
        LongString Identifier;
        LongString Name;
        LongString Surname;
        LongString Address;
        bool isGuest;
        bool isEmployee;
        bool isOwner;
        Integer Discount;

        Logging
        {
            Log Hoteli.Person.Name;
            Log Hoteli.Person.Surname;
            // Description is long and not interesting, so we don't want to log it's values.
        }
    }


    Entity SaloonPerson 
    {
         ShortString Code { AutoCode; }
         Reference OwnerName Hoteli.Person;
         Reference Salon Hoteli.Saloon;
    }

     Entity SaloonHotel 
    {
         ShortString Code { AutoCode; }
         Reference OwnerName Hoteli.Hotel;
         Reference Salon Hoteli.Saloon;
    }

    Entity Saloon 
    {
         ShortString Code { AutoCode; }
         LongString Name;
         Reference HotelSaloon Hoteli.Hotel;     
    }

     Entity ProductPerson 
    {
         ShortString Code { AutoCode; }
         Reference OwnerName Hoteli.Person;
         Reference Product Hoteli.Product;
    }

     Entity ProductHotel
    {
         ShortString Code { AutoCode; }
         Reference OwnerName Hoteli.Hotel;
         Reference Product Hoteli.Product;
    }

    Entity Product 
    {
        ShortString Code { AutoCode; }
         LongString Title;
         Reference HotelSaloon Hoteli.Hotel;
    }

    Action Insert5Hotels 
    '( parametar ,repository, userInfo ) => 
     {
         for(int i=0;i<5;i++) {
         var noviHotel = new Hoteli.Hotel { Code="+++", Name="A" };
         repository.Hoteli.Hotel.Insert( noviHotel );
         }
     }
    ';

    Action Insert5Rooms
    '( parametar ,repository, userInfo ) => 
     {
         for(int i=0;i<5;i++) {
         var noviHotel = new Hoteli.Rooms { Code="+++", NumberOfPeople = 1 };
         repository.Hoteli.Rooms.Insert( noviHotel );
         }
     }
    ';

      SqlQueryable ReservationInfo
    "
        SELECT
            rm.ID,
            NumberOfRooms = COUNT(r.ID)
        FROM
            Hoteli.RoomReservation r
            JOIN Hoteli.Reservation rs on r.ReservationHotelID = rs.ID
            JOIN Hoteli.Rooms rm on r.ReservationRoomID = rm.ID
        GROUP BY
            rm.ID
    "
{
    Extends Hoteli.Rooms;
    Integer NumberOfRooms;

    AutodetectSqlDependencies;
}

}